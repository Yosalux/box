name: GENERATE APK
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 关键修改1：设置兼容的Java版本
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'gradle'

      # 关键修改2：添加Gradle缓存加速构建
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            \~/.gradle/caches
            \~/.gradle/wrapper
            build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', 'gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 关键修改3：添加Gradle版本检查（可选）
      - name: Verify Gradle Version
        run: |
          chmod +x gradlew
          ./gradlew --version
          echo "Gradle home: ${{ env.GRADLE_HOME }}"

      - name: Build With Gradle
        run: |
          chmod +x gradlew
          # 添加--no-daemon避免与CI环境冲突
          ./gradlew assembleRelease --build-cache --parallel --no-daemon --warning-mode all

      - name: Prepare App
        run: |
          # 使用更精确的APK路径匹配模式
          APK_SOURCE="app/build/outputs/apk/**/release/*.apk"
          
          mkdir -p ${{ github.workspace }}/apk/
          
          # 使用find命令确保捕获所有变体
          find app/build/outputs/apk -name '*.apk' -exec cp {} ${{ github.workspace }}/apk/ \;

      - name: Upload App To Artifact
        uses: actions/upload-artifact@v4
        with:
          name: box-${{ github.run_id }}-${{ github.run_attempt }}
          path: ${{ github.workspace }}/apk/*
          retention-days: 7  # 添加自动清理策略
